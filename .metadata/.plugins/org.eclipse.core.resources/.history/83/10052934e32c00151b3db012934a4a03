package GetTaskTrackers;
import java.net.InetSocketAddress;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapred.Counters;
import org.apache.hadoop.mapred.Counters.Group;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobID;
import org.apache.hadoop.mapred.RunningJob;
import org.apache.hadoop.mapred.Task.Counter;
import org.apache.hadoop.mapred.TaskCompletionEvent;
import org.apache.hadoop.mapred.TaskID;
import org.apache.hadoop.mapred.TaskReport;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class CallTaskTrackers implements Tool{

	public static String jobID;
	public static int killratio;
	HashMap<TaskID,TaskReport> tasks = new HashMap<TaskID, TaskReport>();
	public Configuration getConf() {
		// TODO Auto-generated method stub
		return null;
	}

	public void setConf(Configuration arg0) {
		// TODO Auto-generated method stub

	}

	public int run(String[] args) throws Exception {
		// TODO Auto-generated method stub
		jobID = args[0];
		killratio= Integer.parseInt(args[1]);
		JobClient theJobClient = new JobClient(new InetSocketAddress("10.2.0.94", 8088), new Configuration());
		@SuppressWarnings("deprecation")

		RunningJob theJob = theJobClient.getJob(jobID); // caution, deprecated

		//verify if the job is running or not.
		if(theJob.isComplete()){
			System.out.println("The Job is already Complete!! Exiting");
			return 0;
		}

		JobID j_id = theJob.getID();

		//Check Current Running tasks:		
		TaskCompletionEvent[] taskcompletionevents = theJob.getTaskCompletionEvents(0);
		int num_tasks = taskcompletionevents.length;
		if(num_tasks==0){
			System.out.println("There are no tasks running atm!!");
		}
		/*		This Block Just gives the current running tasks.
		 * 		else{

			for(TaskCompletionEvent t : taskcompletionevents){
				System.out.println("Task ID: "+t.getTaskId() + "Task Attempt ID: " + t.getTaskAttemptId() + "Task Status" + t.getTaskStatus() + "Task Time: " + t.getTaskRunTime());
			}
		}

		 */	
		TaskReport[] mt = theJobClient.getMapTaskReports(j_id);
		//Populate the Task's hash Map with the map and reduce tasks
		for (TaskReport trep : mt){
			if(!tasks.containsKey(trep.getTaskID())){
				tasks.put(trep.getTaskID(), trep);
			}
		}
		TaskReport[] rt = theJobClient.getReduceTaskReports(j_id);
		for (TaskReport trep : rt){
			if(!tasks.containsKey(trep.getTaskID())){
				tasks.put(trep.getTaskID(), trep);
			}
		}
		//Check the Task details
		printTaskDetails();

		TaskID fastesttaskID = fastesttaskID(tasks);

		return 0;
	}
	public TaskID fastesttaskID(HashMap<TaskID, TaskReport> tasks){
		TaskID fastestTask = new TaskID();
		Double maxprogress=0.0;
		Double currentprogress=0.0;
		Long finalTime;
		for(Entry<TaskID,TaskReport> t: tasks.entrySet()){
			if(t.getValue().getState().equals("SUCCESSFULL")){

				finalTime = t.getValue().getFinishTime();
			}
			else if (t.getValue().getState().equals("RUNNING")){
				Counters c = t.getValue().getCounters();
//				finalTime = c.getCounter(key);
			}
			Long startTime = t.getValue().getStartTime();
			Float progress = t.getValue().getProgress() *100;
//			currentprogress = (double)progress / (double)(finalTime-startTime);
			if(maxprogress<currentprogress){
//				maxprogress = currentprogress;
//				fastestTask = t.getKey();
			}



		}

		return null;

	}
	public void printTaskDetails(){
		for(Entry<TaskID, TaskReport> t: tasks.entrySet()){
			TaskReport tr = t.getValue();
			Counters c1 = tr.getCounters();
			for(Group c : c1){
				System.out.println("counter name: "+ c.getDisplayName() + "Counter Value: "+ c.getCounter("GC_TIME_MILLIS"));
			}
			System.out.println("~~~~~~Details for Task:~~~~~~");
			System.out.println("Task ID: " + tr.getTaskId());
			System.out.println("Task State: "+ tr.getState());
//			System.out.println("Running Task AttemptID: " + tr.getRunningTaskAttempts().iterator().toString());
//			System.out.println("Successful Task AttemptID: " + tr.getSuccessfulTaskAttempt().toString());
			System.out.println("Start Time: " + tr.getStartTime());
			System.out.println("Progress: " + (float)tr.getProgress()*100);
			System.out.println();

		}
		

	}
	public static void main(String args[]) throws Exception{
		int exitCode = ToolRunner.run(new CallTaskTrackers(), args);
		System.exit(exitCode);
	}

}
